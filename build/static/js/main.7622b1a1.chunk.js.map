{"version":3,"sources":["app_components/weather.component.jsx","app_components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","tempCurrent","min","max","minmaxTemp","minTemp","maxTemp","description","Form","error","role","onSubmit","loadweather","type","id","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","calcelius","main","temp","temp_min","temp_max","weather","get_weatherIcon","state","undefined","icon","Thunderstorm","Dizzle","Rain","Snow","Fog","Clear","Clouds","Math","floor","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7622b1a1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Weather(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"cards\">\r\n        <h1>\r\n          {props.city}\r\n        </h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={\"wi \" + props.weatherIcon + \" display-1\"}></i>\r\n        </h5>\r\n       {props.tempCurrent ?  <h1 className=\"py-2 px-4\">{props.tempCurrent}&deg;</h1> : null} \r\n        {minmaxTemp(props.minTemp, props.maxTemp)}\r\n        <h3 className=\"py-4 text-capitalize\">{props.description}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction minmaxTemp(min, max) {\r\n  if(min&&max){\r\n  return (\r\n    <h3>\r\n      <span className=\"px-4\">{min}&deg;</span>\r\n      <span className=\"px-4\">{max}&deg;</span>\r\n    </h3>\r\n  );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              id = \"01\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              id = \"02\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 my-2 text-md-left\">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nfunction error(){\r\n  return(\r\n    <div className=\"alert alert-danger mx-5\" role =\"alert\">\r\n      Please enter City and Country\r\n    </div>\r\n  )\r\n}\r\nexport default Form;\r\n","import React from \"react\";\nimport Weather from \"./app_components/weather.component.jsx\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons-master/css/weather-icons.css\";\nimport Form from \"./app_components/form.component\";\nimport \"./App.css\";\nconst API_key = \"d17964bd50ad650c065c1cc255174b74\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      tempCurrent: undefined,\n      minTemp: undefined,\n      maxTemp: undefined,\n      description: \"\",\n      icon: undefined,\n      error : false\n      \n    };\n  \n  this.weatherIcon = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Dizzle: \"wi-sleet\",\n    Rain: \"wi-storm-showers\",\n    Snow: \"wi-snow\",\n    Fog: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-day-fog\"\n  };\n}\n  calcelius(temp) {\n    let cell = Math.floor(temp - 273);\n    return cell;\n  }\n  get_weatherIcon(icon, rangeID) {\n    if (rangeID >= 200 && rangeID <= 232) {\n      this.setState({ icon: this.weatherIcon.Thunderstorm });\n    } else if (rangeID >= 300 && rangeID <= 321) {\n      this.setState({ icon: this.weatherIcon.Dizzle });\n    } else if (rangeID >= 500 && rangeID <= 531) {\n      this.setState({ icon: this.weatherIcon.Rain });\n    } else if (rangeID >= 600 && rangeID <= 622) {\n      this.setState({ icon: this.weatherIcon.Snow });\n    } else if (rangeID >= 701 && rangeID <= 781) {\n      this.setState({ icon: this.weatherIcon.Fog });\n    } else if (rangeID >= 801 && rangeID <= 804) {\n      this.setState({ icon: this.weatherIcon.Clouds });\n    } else if (rangeID === 800) {\n      this.setState({ icon: this.weatherIcon.Clear });\n    } else {\n      this.setState({ icon: this.weatherIcon.Clear });\n    }\n  }\n  getWeather = async (e) => {\n    \n      e.preventDefault();\n    const city = e.target.elements.city.value; \n    const country = e.target.elements.country.value; \n    if(city){\n      const api_call = await fetch(\n        \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n         city + \",\"+\n         country+\n         \"&appid=\" +\n         API_key \n        // \"d17964bd50ad650c065c1cc255174b74\"\n          \n      );\n     \n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: response.name +\" , \"+response.sys.country ,\n        tempCurrent: this.calcelius(response.main.temp),\n        minTemp: this.calcelius(response.main.temp_min),\n        maxTemp: this.calcelius(response.main.temp_max),\n        description: response.weather[0].description,\n        error : false\n      });\n      this.get_weatherIcon(this.weatherIcon, response.weather[0].id);\n    }\n    else{\n        this.setState({error : true})\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error = {this.state.error}\n         />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          description={this.state.description}\n          tempCurrent={this.state.tempCurrent}\n          minTemp={this.state.minTemp}\n          maxTemp={this.state.maxTemp}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}